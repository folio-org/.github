name: Maven checkout and build

on:
  workflow_call:
    inputs:
      is-release:
        description: If we are on a tag vX.Y.Z, this will be "True", otherwise "False"
        required: true
        type: string
      java-version:
        required: true
        type: string
      allow-snapshots-release:
        required: true
        type: boolean
      docker-registry:
        required: true
        type: string

jobs:
  build:
    name: Checkout and build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: recursive

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java-version}}
          distribution: 'temurin'

      - name: Cache Sonar packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Gather some variables
        id: vars1
        run: |
          echo "artifact-id=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)" | tee -a $GITHUB_ENV
          echo "SHA_SHORT=$(git rev-parse --short HEAD)" | tee -a $GITHUB_ENV

      - name: Calculate version number, if not a release tag
        id: calculate-version
        if: ${{ inputs.is-release == 'False' }}
        run: |
          echo "version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)-${{ env.SHA_SHORT }}" | tee -a $GITHUB_OUTPUT

      - name: Get release tag version number, if applicable
        id: tag-version
        if: ${{ inputs.is-release == 'True' }}
        run: |
          echo "version=${GITHUB_REF#refs/tags/v}" | tee -a $GITHUB_OUTPUT

      # aggregate tag and non-tag versions into a single output
      # the irrelevant one will be an empty string
      - name: Get version from previous steps
        id: actual-version
        run: |
          echo "artifact-version=${{ steps.calculate-version.outputs.version }}${{ steps.tag-version.outputs.version }}" | tee -a $GITHUB_ENV

      - name: Print module version to job summary
        id: show-version
        run: |
          echo "artifact-id: ${{ env.artifact-id }}" >> $GITHUB_STEP_SUMMARY
          echo "artifact-version: ${{ env.artifact-version }}" >> $GITHUB_STEP_SUMMARY

      - name: Discover release dependencies that are snapshots
        if: ${{ inputs.is-release == 'True' }}
        run: mvn dependency:list | { grep -i snapshot | tee snapshots.txt || true; }

      - name: Report release dependencies that are snapshots
        if:  ${{ inputs.is-release == 'True' }}
        run: if ! ${{ inputs.allow-snapshots-release }} && [ -s snapshots.txt ]; then exit 1; fi

      - name: Maven build
        run: mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install org.jacoco:jacoco-maven-plugin:report

      - name: Update ModuleDescriptor identifiers
        run: |
          if test -f "$MOD_DESCRIPTOR"; then
            echo "Found $MOD_DESCRIPTOR"
            cd target
            mv ModuleDescriptor.json ModuleDescriptor.json.orig
            cat <<< $( \
              jq '. | .id |= "${{ env.artifact-id }}-${{ env.artifact-version }}" | if has("launchDescriptor") then
                .launchDescriptor.dockerImage |= "${{ inputs.docker-registry }}/${{ env.artifact-id }}:${{ env.artifact-version }}" |
                .launchDescriptor.dockerPull |= "true" else . end' ModuleDescriptor.json.orig \
            ) > ModuleDescriptor.json
          else
            echo "Could not find $MOD_DESCRIPTOR"
            exit 1
          fi
        env:
          MOD_DESCRIPTOR: './target/ModuleDescriptor.json'

      - name: Print ModuleDescriptor
        run: cat target/ModuleDescriptor.json

      # we publish it to the registry as a separate job
      - name: Upload ModuleDescriptor as build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ModuleDescriptor.json
          path: target/ModuleDescriptor.json
          retention-days: 1

